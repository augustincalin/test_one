function HideMyHelp(a, b, c, d, e, f) {
    var g = "sal-optionenfrage-ohne-label__help--visible", h = "sal-optionenfrage-ohne-label__help--invisible", i = 549, j = !0;
    this.hideIt = function() {
        j && (a.addClass(g), a.removeClass(h), b.removeClass(g), b.addClass(h), f ? d.hide().jScrollPane() : d.hide());
    }, this.showIt = function() {
        var e = $j(window).width();
        if (i >= e) {
            j = !1;
            var k = $j(window).height();
            c.modal({
                containerCss: {
                    width: e - 32,
                    height: k - 32,
                    padding: 16
                },
                overlayClose: !0,
                autoResize: !0,
                zIndex: 50050
            });
        } else j = !0, b.addClass(g), b.removeClass(h), a.removeClass(g), a.addClass(h), 
        f ? d.show().jScrollPane() : d.show();
    }, f && e > 0 && d.css({
        height: e + "px"
    }), this.hideIt();
}

OFTextBlockGruppe = {
    debug: !1
}, jQuery(function() {
    OFTextBlockGruppe.debug && console.log("Init OFTextBlockGruppe", jQuery(".sal-textgruppe:gt(0)")), 
    jQuery(".sal-textgruppe").length <= 1 || (jQuery(".sal-textgruppe").addClass("sal-textgruppe-akkordeon"), 
    jQuery(".sal-textgruppe:gt(0)").addClass("sal-textgruppe--closed"), jQuery(".sal-textgruppe .sal-textgruppe-firstelement").on("click", function() {
        jQuery(".sal-textgruppe").addClass("sal-textgruppe--closed"), jQuery(this).parent().removeClass("sal-textgruppe--closed");
    }));
}), OFAddressSuggestor = function(a, b, c, d) {
    OFAddressSuggestor.debug && (console.log("New OFAddressSuggestor"), console.log(a, b, c), 
    console.log(jQuery("#" + a), jQuery("#" + b), jQuery("#" + c), jQuery("#" + d)));
    var e = !0;
    if ("undefined" == typeof a && (console.log("OFAddressSuggestor: Error - no id for zip field specified"), 
    e = !1), "undefined" == typeof b && (console.log("OFAddressSuggestor: Error - no id for city field specified"), 
    e = !1), "undefined" == typeof c && (console.log("OFAddressSuggestor: Error - no id for street field specified"), 
    e = !1), "undefined" == typeof d && (console.log("OFAddressSuggestor: Error - no id for number field specified"), 
    e = !1), e) {
        if (this.proxy = this.initializeDataProxy(), this.fieldIdZip = a, this.fieldIdCity = b, 
        this.fieldIdStreet = c, this.fieldIdHaus = d, this.zipField = jQuery("#" + this.fieldIdZip), 
        this.cityField = jQuery("#" + this.fieldIdCity), this.streetField = jQuery("#" + this.fieldIdStreet), 
        this.hausField = jQuery("#" + this.fieldIdHaus), 1 !== this.zipField.length || 1 !== this.cityField.length) return void console.log("OFAddressSuggestor: Error - exactly one zip and city fields are required on this page");
        this.attachZipFieldEvents(), this.attachCityFieldEvents(), 1 === this.streetField.length && this.attachStreetFieldEvents();
    }
}, OFAddressSuggestor.debug = !1, OFAddressSuggestor.prototype.setZipValue = function(a) {
    OFAddressSuggestor.debug && console.log("setZipValue", a), this.zipField.val(a);
    var b = window["submit" + this.zipField.attr("id") + "UCId"];
    "function" == typeof b && b();
}, OFAddressSuggestor.prototype.setCityValue = function(a) {
    OFAddressSuggestor.debug && console.log("setCityValue", a), this.cityField.val(a);
    var b = window["submit" + this.cityField.attr("id") + "UCId"];
    "function" == typeof b && b();
}, OFAddressSuggestor.prototype.setStreetValue = function(a) {
    OFAddressSuggestor.debug && console.log("setStreetValue", a), this.streetField.val(a);
    var b = window["submit" + this.streetField.attr("id") + "UCId"];
    "function" == typeof b && b();
}, OFAddressSuggestor.prototype.attachZipFieldEvents = function() {
    this.zipField.on("keypress", function(a) {
        return !(a.charCode > 31 && (a.charCode < 48 || a.charCode > 57));
    });
    var a = this;
    this.addSuggestorToField(this.zipField, 1, function(b, c) {
        a.proxy.plzSuggestions(b, c);
    }, function(b) {
        OFAddressSuggestor.debug && console.log(b), a.setZipValue(b.plz), "string" == typeof b.city ? (OFAddressSuggestor.debug && console.log("setting city to", b.city), 
        a.setCityValue(b.city), null !== a.streetField && setTimeout(function() {
            a.streetField.focus();
        }, 1)) : setTimeout(function() {
            a.cityField.focus();
        }, 1);
    });
}, OFAddressSuggestor.prototype.attachCityFieldEvents = function() {
    var a = this, b = function(b) {
        OFAddressSuggestor.debug && console.log(b), a.setCityValue(b.city), null !== a.streetField && setTimeout(function() {
            a.streetField.focus();
        }, 1);
    };
    this.addSuggestorToField(this.cityField, 1, function(c, d) {
        "" === c ? a.proxy.citySuggestions(a.zipField.val(), c, function(c) {
            1 === c.length || "" !== a.cityField.val() ? b(c[0]) : d(c);
        }) : a.proxy.citySuggestions(a.zipField.val(), c, d);
    }, function(a) {
        b(a);
    });
}, OFAddressSuggestor.prototype.attachStreetFieldEvents = function() {
    var a = this;
    this.addSuggestorToField(a.streetField, 1, function(b, c) {
        a.proxy.streetSuggestions(a.zipField.val(), a.cityField.val(), b, c);
    }, function(b) {
        OFAddressSuggestor.debug && console.log(b), a.setStreetValue(b.street), null !== a.hausField && setTimeout(function() {
            a.hausField.focus();
        }, 1);
    });
}, OFAddressSuggestor.prototype.addSuggestorToField = function(a, b, c, d) {
    OFAddressSuggestor.debug && console.log("addSuggestorToField", a, b);
    var e = jQuery('<div class="sal-addrsugg"></div>').insertAfter(a), f = jQuery("<ul>").appendTo(e), g = "submit" + a.attr("id") + "UCId", h = "beforeSubmit" + a.attr("id") + "UCId", i = window[h];
    OFAddressSuggestor.debug && console.log("_beforeSubmitFunction", h, i);
    var j = a.val();
    a.on("focus.ofaddrsugg", function() {
        j = a.val();
    });
    var k = function() {
        e.hide(), a.attr("autocomplete", "on"), OFAddressSuggestor.debug && console.log("restoring", h), 
        window[h] = i, a.val() != j && (OFAddressSuggestor.debug && console.log("calling", g, window[g]), 
        "function" == typeof window[g] && window[g]()), a.off("blur.ofaddrsugg");
    }, l = function() {
        OFAddressSuggestor.debug && console.log("overriding", h), window[h] = function() {
            return !1;
        }, e.show(), a.off("blur.ofaddrsugg").on("blur.ofaddrsugg", function() {
            k();
        });
    }, m = function(e) {
        return a.val() == j ? void (OFAddressSuggestor.debug && console.log("Skipping onInput with default value")) : (OFAddressSuggestor.debug && console.log("field", a, "input", a.val()), 
        void (a.val().length >= b ? (a.attr("autocomplete", "off"), c(a.val(), function(a) {
            f.empty(), jQuery.each(a, function(a, b) {
                var c = jQuery("<li></li>");
                "object" == typeof b && b.title ? c.html(b.title) : c.html(b), c.on("mousedown.ofaddrsugg", function() {
                    OFAddressSuggestor.debug && console.log("mousedown"), d(b), k();
                }), f.append(c);
            }), f.is(":empty") ? k() : l();
        })) : k()));
    };
    a.on("input.ofaddrsugg", m), 0 === b && a.on("focus.ofaddrsugg", m), a.on("keydown.ofaddrsugg", function(a) {
        if (38 == a.keyCode) {
            OFAddressSuggestor.debug && console.log("up");
            var b = f.find("li.sal-addrsugg-selected");
            return OFAddressSuggestor.debug && console.log("selected Li", b), b.is(":first-child") ? !0 : (OFAddressSuggestor.debug && console.log("is not first child"), 
            b.removeClass("sal-addrsugg-selected").prev().addClass("sal-addrsugg-selected"), 
            !1);
        }
        if (40 == a.keyCode) {
            OFAddressSuggestor.debug && console.log("down");
            var b = f.find("li.sal-addrsugg-selected");
            return OFAddressSuggestor.debug && console.log("selected li", b), 0 === b.length ? (OFAddressSuggestor.debug && console.log("no selection yet"), 
            f.find("li:first-child").addClass("sal-addrsugg-selected"), !1) : b.is(":last-child") ? !0 : (OFAddressSuggestor.debug && console.log("not last child"), 
            b.removeClass("sal-addrsugg-selected").next().addClass("sal-addrsugg-selected"), 
            !1);
        }
        if (13 == a.keyCode) {
            var b = f.find("li.sal-addrsugg-selected");
            if (OFAddressSuggestor.debug && console.log("selected li", b), 1 === b.length) return OFAddressSuggestor.debug && console.log("triggering mousedown"), 
            b.trigger("mousedown.ofaddrsugg"), !1;
            var c = f.find("li");
            return 1 === c.length ? (OFAddressSuggestor.debug && console.log("only one competition, select it"), 
            c.trigger("mousedown.ofaddrsugg"), !1) : (OFAddressSuggestor.debug && console.log("no selection, submit form"), 
            !0);
        }
        if (9 == a.keyCode) {
            var b = f.find("li.sal-addrsugg-selected");
            if (OFAddressSuggestor.debug && console.log("selected li", b), 1 === b.length) b.trigger("mousedown.ofaddrsugg"); else {
                var c = f.find("li");
                1 === c.length && (OFAddressSuggestor.debug && console.log("only one competition, select it"), 
                c.trigger("mousedown.ofaddrsugg"));
            }
        }
    });
}, OFAddressSuggestor.prototype.initializeDataProxy = function() {
    if ("undefined" == typeof google) return void ("undefined" != typeof console && console.warn("Warning: Google Maps API not loaded"));
    var a = new google.maps.places.AutocompleteService(), b = new google.maps.Geocoder(), c = function(a, c, d) {
        b.geocode({
            componentRestrictions: {
                country: "DE",
                postalCode: a
            }
        }, function(a, b) {
            if (OFAddressSuggestor.debug && console.log("geocoding result", arguments), 1 === a.length) {
                var e = a[0], f = [], g = new RegExp("^(" + c + ")", "i");
                if ("undefined" != typeof e.postcode_localities) for (var h = 0; h < e.postcode_localities.length; h++) {
                    var i = {
                        city: e.postcode_localities[h]
                    };
                    if ("string" == typeof c) {
                        if (!i.city.toLowerCase().startsWith(c.toLowerCase())) continue;
                        i.title = i.city.replace(g, "<em>$1</em>");
                    } else i.title = i.city;
                    f.push(i);
                } else {
                    var j = null;
                    a: for (var h = 0; h < e.address_components.length; h++) for (var k = e.address_components[h], l = 0; l < k.types.length; l++) if ("locality" == k.types[l]) {
                        j = k.long_name;
                        break a;
                    }
                    null !== j && f.push({
                        city: j,
                        title: j
                    });
                }
                d(f);
            }
        });
    };
    return {
        plzSuggestions: function(b, d) {
            return "function" != typeof d ? void console.log("second parameter must be a function taking an array as parameter") : (OFAddressSuggestor.debug && console.log("get plz prediction", arguments), 
            void a.getPlacePredictions({
                input: b,
                types: [ "(regions)" ],
                componentRestrictions: {
                    country: "de"
                }
            }, function(a, e) {
                if (e != google.maps.places.PlacesServiceStatus.OK) return void (OFAddressSuggestor.debug && console.log(e));
                for (var f = [], g = 0; g < a.length; g++) {
                    var h = a[g].terms[0].value;
                    OFAddressSuggestor.debug && console.log("plz is...", h);
                    var i = {
                        plz: h,
                        title: h.replace(b, "<em>" + b + "</em>")
                    };
                    f.push(i);
                }
                if (1 === f.length) {
                    var j = f[0];
                    f = [], c(j.plz, null, function(a) {
                        for (var b = 0; b < a.length; b++) {
                            var c = a[b];
                            f.push({
                                plz: j.plz,
                                city: c.city,
                                title: j.title + " " + c.title
                            });
                        }
                        d(f);
                    });
                } else f.length > 0 && d(f);
            }));
        },
        citySuggestions: function(a, b, d) {
            OFAddressSuggestor.debug && console.log("geocoding", arguments), c(a, b, d);
        },
        streetSuggestions: function(b, c, d, e) {
            var f = b + " " + c + ", " + d;
            OFAddressSuggestor.debug && console.log("get street suggestion", f), a.getPlacePredictions({
                input: f,
                types: [ "address" ],
                componentRestrictions: {
                    country: "de"
                }
            }, function(a, b) {
                if (b != google.maps.places.PlacesServiceStatus.OK) return void (OFAddressSuggestor.debug && console.log("streetSuggestions", b));
                OFAddressSuggestor.debug && console.log("streetSuggestions", a);
                for (var c = [], f = new RegExp("^(" + d + ")", "i"), g = 0; g < a.length; g++) {
                    var h = a[g], i = h.terms[0].value;
                    i.toLowerCase().startsWith(d.toLowerCase()) && c.push({
                        street: i,
                        title: i.replace(f, "<em>$1</em>")
                    });
                }
                c.length > 0 && "function" == typeof e && e(c);
            });
        }
    };
}, OFCRS = function(a, b, c, d) {
    OFCRS.debug && (console.log("New OFCRS"), console.log(a, b.length, "countries"));
    var e = !0;
    "undefined" == typeof a && (console.log("OFCRS: Error - no wrapperId specified"), 
    e = !1), "undefined" == typeof b && (console.log("OFCRS: Error - no countryList specified"), 
    e = !1), e && (this.wrapperId = a, this.wrapper = jQuery("#" + a), this.countryList = b, 
    this.fields = this.wrapper.find(".sal-spezial-crs-fields"), this.template = this.wrapper.find(".sal-spezial-crs-field-template .sal-spezial-crs-field-group"), 
    this.button = this.wrapper.find(".sal-spezial-crs-button"), this.input = this.wrapper.find(".sal-spezial-crs-input"), 
    this.locPleaseChoose = c, this.locNoMatches = d, this.data = [], this.init());
}, OFCRS.debug = !1, OFCRS.prototype.readData = function() {
    this.data = JSON.parse(this.input.val()), OFCRS.debug && console.log("CRS: readData", this.data);
}, OFCRS.prototype.writeData = function() {
    OFCRS.debug && console.log("CRS: writeData", this.data), this.input.val(JSON.stringify(this.data));
}, OFCRS.prototype.init = function() {
    var a = this;
    this.hookButton(), this.readData(), 0 === this.data.length ? this.addGroup() : this.data.forEach(function(b, c) {
        a.addGroup(b);
    });
}, OFCRS.prototype.hookButton = function() {
    var a = this;
    this.button.on("click", function(b) {
        b.preventDefault(), a.addGroup();
    });
}, OFCRS.prototype.addGroup = function(a) {
    var b = this;
    OFCRS.debug && console.log("CRS: Adding new Group", a);
    var c = this.template.clone();
    c.show();
    var d = c.find(".sal-spezial-crs-number"), e = c.find(".sal-spezial-crs-delete"), f = function() {
        OFCRS.debug && console.log(b.fields.find(".sal-spezial-crs-field-group"), c);
        var a = b.fields.find(".sal-spezial-crs-field-group"), d = a.index(c);
        return -1 === d && (d = a.length), d;
    };
    c.find(".sal-spezial-crs-country label").attr("for", this.wrapperId + "_field" + f() + "_c"), 
    c.find(".sal-spezial-crs-country input").attr("id", this.wrapperId + "_field" + f() + "_c"), 
    c.find(".sal-spezial-crs-number label").attr("for", this.wrapperId + "_field" + f() + "_n"), 
    c.find(".sal-spezial-crs-number input").attr("id", this.wrapperId + "_field" + f() + "_n"), 
    "undefined" != typeof a && c.find(".sal-spezial-crs-country input").val(a);
    var g = function(a, b, c) {
        return a.d;
    }, h = function(a, b) {
        return a.d;
    }, i = c.find(".sal-spezial-crs-country input").select2({
        initSelection: function(b, c) {
            c(a);
        },
        data: {
            results: this.countryList,
            text: function(a) {
                return a.d;
            }
        },
        minimumResultsForSearch: 12,
        placeholder: b.locPleaseChoose,
        formatNoMatches: function() {
            return b.locNoMatches;
        },
        dropdownCssClass: "sal-openforms",
        formatResult: g,
        formatSelection: h
    }), j = function(a) {
        b.data[f()] = {
            id: a.id,
            d: a.d,
            tin: a.tin,
            nr: a.nr
        }, a.tin ? (OFCRS.debug && console.log("show number field", typeof a.nr), "undefined" != typeof a.nr ? (d.find("input").val(a.nr), 
        d.addClass("noError"), d.removeClass("error")) : (d.find("input").val(""), b.wrapper.is(".sal-spezial-crs--showerrors") && d.addClass("error"), 
        d.removeClass("noError")), d.show()) : d.hide();
    };
    i.on("change", function(a) {
        OFCRS.debug && console.log("CRS: select", f(), "changed to", a.added);
        var c = a.added;
        j(c), b.writeData();
    }), "undefined" != typeof a && j(a), d.on("change", function(a) {
        OFCRS.debug && console.log("CRS: input", f(), "changed");
        var c = d.find("input").val().trim();
        "" == c ? d.removeClass("noError") : (d.removeClass("error"), d.addClass("noError"));
        var e = b.data[f()];
        e.nr = c, b.writeData();
    }), e.on("click", function(a) {
        a.preventDefault();
        var e = b.fields.find(".sal-spezial-crs-field-group");
        1 === e.length ? (i.select2("val", ""), d.find("input").val(""), d.hide(), b.data = [], 
        b.writeData()) : (b.data.splice(f(), 1), b.writeData(), c.remove()), b.updateButtonDisplay();
    }), this.fields.append(c), b.updateButtonDisplay();
}, OFCRS.prototype.updateButtonDisplay = function() {
    this.fields.find(".sal-spezial-crs-field-group").length > 9 ? this.button.hide() : this.button.show();
}, OFCustomerDataSelection = function(a, b, c, d, e, f, g, h, i, j, k, l) {
    var m = this;
    this.listContainer = jQuery("#" + c), this.numberDropdown = null, this.productDropdown = null, 
    this.selectedNumber = "NoSelectionString", this.selectedProducts = [], this.init = function() {
        m.initDropdown(), m.readSelectedProducts(), m.updateList();
    }, this.initDropdown = function() {
        m.numberDropdown = jQuery('<select class="sal-auswahl-double"></select>');
        var c = a.__order__;
        jQuery.each(c, function(b, c) {
            var d = a[c], e = jQuery("<option></option>").attr("value", c).html(d.displayFirstLine + "<br>" + d.displaySecondLine);
            d.selected && (e.attr("selected", "selected"), m.selectedNumber = c), e.appendTo(m.numberDropdown);
        }), jQuery("#" + b).append(m.numberDropdown);
        var d = function(b) {
            if (!b.id) return b.text;
            var c = a[b.id];
            return c ? jQuery('<span class="sal-multilineoption">' + c.displayFirstLine + "<br>" + (c.displaySecondLine ? c.displaySecondLine : "&nbsp;") + "</span>") : b.text;
        };
        m.numberDropdown.select2({
            minimumResultsForSearch: -1,
            placeholder: j,
            formatResult: d,
            formatSelection: d
        }), m.numberDropdown.on("change", m.onNumberSelection);
    }, this.onNumberSelection = function() {
        var a = m.numberDropdown.val();
        a != m.selectedNumber && (m.selectedNumber = a, m.selectedProducts.length > 0 && !f && (m.selectedProducts = [], 
        m.writeSelectedProducts()), m.updateList());
    }, this.updateList = function() {
        var b = [];
        if ("NoSelectionString" !== m.selectedNumber && (b = a[m.selectedNumber].products), 
        e) {
            var d = jQuery("<ul></ul>");
            if (0 === b.length) d.append('<li class="sal-no-options-info">' + k + "</li>"); else {
                var h = null, i = null, j = !1;
                jQuery.each(b, function(a, b) {
                    var e = c + "_" + a, f = jQuery("<li></li>"), k = jQuery('<input type="' + (g ? "checkbox" : "radio") + '" name="' + c + 'opt" id="' + e + '">').on("change", m.toggleProductSelection.bind(m, b));
                    jQuery.inArray(b.value, m.selectedProducts) > -1 && (k.attr("checked", "checked"), 
                    j = !0), 0 === a && (i = k, h = b), k.appendTo(f), jQuery("<label>").html(b.displayFirstLine + "<br>" + b.displaySecondLine).attr("for", e).appendTo(f), 
                    f.appendTo(d);
                }), f && null != i && null != h && !j && (i.attr("checked", "checked"), m.selectedProducts = [ h.value ], 
                m.writeSelectedProducts());
            }
            m.listContainer.find("fieldset").empty().append(d);
        } else if (m.productDropdown = jQuery('<select class="sal-auswahl-double"></select>'), 
        0 === b.length) m.listContainer.html('<div class="sal-no-options-info">' + k + "</div>"); else {
            if (!f) {
                jQuery("<option></option>").attr("value", "NoSelectionString").html(l).attr("selected", "selected").appendTo(m.productDropdown);
            }
            var n = !1;
            jQuery.each(b, function(a, b) {
                var c = jQuery("<option></option>").attr("value", b.value).html(b.displayFirstLine + "%%BR%%" + (b.displaySecondLine ? b.displaySecondLine : "&nbsp;"));
                jQuery.inArray(b.value, m.selectedProducts) > -1 && (c.attr("selected", "selected"), 
                n = !0), 0 === a && (firstOption = c), c.appendTo(m.productDropdown);
            }), f && null != firstOption && !n && (firstOption.attr("selected", "selected"), 
            m.selectedProducts = [ firstOption.attr("value") ], m.writeSelectedProducts()), 
            m.listContainer.empty().append(m.productDropdown);
            var o = function(a) {
                return a.id ? jQuery('<span class="sal-multilineoption">' + a.text.replace("%%BR%%", "<br>") + "</span>") : a.text;
            };
            m.productDropdown.select2({
                minimumResultsForSearch: -1,
                placeholder: l,
                formatResult: o,
                formatSelection: o
            }), m.productDropdown.on("change", m.onProductSelection);
        }
        m.updateScrollArea();
    }, this.updateScrollArea = function() {
        var a = window[d];
        a && "function" == typeof a && a();
    }, this.onProductSelection = function() {
        var a = m.productDropdown.val();
        "NoSelectionString" === a ? m.selectedProducts = [ a ] : m.selectedProducts = [ a ], 
        m.writeSelectedProducts();
    }, this.toggleProductSelection = function(a) {
        if (g) {
            var b = jQuery.inArray(a.value, m.selectedProducts);
            b > -1 ? m.selectedProducts.splice(b, 1) : m.selectedProducts.push(a.value);
        } else m.selectedProducts = [ a.value ];
        m.writeSelectedProducts();
    }, this.readSelectedProducts = function() {
        var a = h.getSelectedOptions();
        null != a && (g ? m.selectedProducts = JSON.parse(a) : m.selectedProducts = [ a ]);
    }, this.writeSelectedProducts = function() {
        var a = "";
        a = g ? JSON.stringify(m.selectedProducts) : 0 == m.selectedProducts.length ? null : m.selectedProducts[0], 
        h.setSelectedOptions(a), i();
    }, this.init();
}, Filialsuche = function(a, b) {
    var c = this;
    this.wrapperID = a, this.rpc = b, this.field_displayValue = jQuery("#" + a + "_displayValue"), 
    this.container_search = jQuery("#" + a + "_search"), this.button_searchButton = jQuery("#" + a + "_searchButton"), 
    this.field_searchField = jQuery("#" + a + "_searchField"), this.container_results = jQuery("#" + a + "_results"), 
    this.container_results_iter = jQuery("#" + a + "_results_iter"), this.container_error_noresult = jQuery("#" + a + "_error_noresult"), 
    this.container_error_validation = jQuery("#" + a + "_error_validation"), this.init = function() {
        this.container_results.hide(), this.container_results_iter.empty(), this.container_error_noresult.hide(), 
        this.container_error_validation.hide(), this.button_searchButton.on("click", function() {
            c.container_error_noresult.hide(), c.container_error_validation.hide(), c.field_displayValue.removeClass("sal-inactive");
            var a = c.field_searchField.val();
            return "" == a ? (c.container_error_validation.show(), !1) : (c.rpc.find(function(a, b) {
                return null != a && ("com.webobjects.foundation.NSMutableArray" == a.javaClass || "com.webobjects.foundation.NSArray" == a.javaClass) && null == b && a.nsarray.length > 0 ? (c.container_results_iter.hide().empty(), 
                jQuery.each(a.nsarray, function(a, b) {
                    return !b.javaClass || "com.webobjects.foundation.NSMutableDictionary" != b.javaClass && "com.webobjects.foundation.NSDictionary" != b.javaClass ? (c.container_error_validation.show(), 
                    2) : void c.addFiliale(b.nsdictionary, a);
                }), c.container_results_iter.show(), void c.container_results.show()) : void c.container_error_noresult.show();
            }, a), !1);
        }), this.field_searchField.on("keydown", function(a) {
            return 13 == a.keyCode ? (c.field_searchField.trigger("blur"), c.button_searchButton.trigger("click"), 
            !1) : void 0;
        }), c.container_results.on("click", "[data-filialnr] input:radio", function(a) {
            var b = jQuery(this).parents("[data-filialnr]"), d = b.data("filialnr");
            c.field_displayValue.addClass("sal-inactive"), c.rpc.select(d);
        });
    }, this.addFiliale = function(a, b) {
        var d = Math.floor(a.distanz), e = Math.round(100 * a.distanz) % 100;
        10 > e && (e = "0" + e);
        var f = jQuery('<li class="row sc-01" data-filialnr="' + a.branchLedger + '"></li>');
        f.append('<input id="radio' + b + '" type="radio" name="filial" class="radio"><label for="radio' + b + '" class="sal-fil-res-fil"><div class="sal-fil-res-name"><strong>' + a.name + '</strong></div><div class="sal-fil-res-addr">' + a.street + ", " + a.zipCode + " " + a.city + '</div><div class="sal-fil-res-dist">' + d + "," + e + "</div></label>"), 
        f.appendTo(c.container_results_iter);
    }, this.init();
}, IDnowLegitimation = function(a, b) {
    var c = this;
    c.rpc = b, c.buttonClicked = !1, c.url = !1, jQuery("#" + a).off("click.sal-idnow").on("click.sal-idnow", function(a) {
        a.preventDefault(), c.url !== !1 ? window.open(c.url, "_blank") : c.buttonClicked || (c.buttonClicked = !0, 
        c.rpc.retrieveUrl(function(a, b) {
            null != a && null == b && (c.url = a, window.open(a, "_blank"));
        }));
    });
};

var KontaktEditor = function(a, b, c, d, e) {
    this.idPrefix = a, this.rpc = b, this.noValueString = c, this.isRequiredMsg = d, 
    this.localizedClose = e, this.localizedClose && "undefined" != typeof this.localizedClose || (this.localizedClose = "Schließen"), 
    this.modalContainer = null, this.errorHeight = [ 70, 90, 110 ], this.currentErrorHeight = 0, 
    this.addHooks();
};

KontaktEditor.prototype.isRequired = function() {
    return null != this.isRequiredMsg && "" != this.isRequiredMsg;
}, KontaktEditor.prototype.addHooks = function() {
    jQuery("#" + this.idPrefix + "-edit_button").on("click", this.onEditButtonClick.bind(this));
}, KontaktEditor.prototype.onEditButtonClick = function() {
    this.copyValuesToModal(), this.showModalWindow();
}, KontaktEditor.prototype.copyValuesToModal = function() {}, KontaktEditor.prototype.showModalWindow = function() {
    this.onModalWindowShown();
}, KontaktEditor.prototype.closeModalWindow = function() {
    jQuery.modal.close();
}, KontaktEditor.prototype.onModalWindowShown = function() {
    this.modalContainer = jQuery("#simplemodal-container"), this.addModalHooks(), this.isRequired() && this.modalContainer.find(".oblig, .sal-delete").remove();
}, KontaktEditor.prototype.addModalHooks = function() {
    this.modalContainer.on("click.savebutton", ".sal-save", this.onSaveButtonClicked.bind(this)), 
    this.modalContainer.on("click.deleteButton", ".sal-delete", this.onDeleteButtonClicked.bind(this)), 
    this.modalContainer.on("click.cancelbutton", ".sal-cancel", this.onCancelButtonClicked.bind(this));
    var a = this;
    this.modalContainer.find(".input").on("keydown", function(b) {
        13 == b.keyCode && a.onSaveButtonClicked();
    }), this.modalContainer.find(".sal-time").on("input propertychange", function() {
        var a = jQuery(this).val();
        2 == a.length && jQuery(this).val(jQuery(this).val() + ":");
    });
}, KontaktEditor.prototype.onSaveButtonClicked = function() {
    return this.modalContainer.children().fadeTo(200, .5), this.validateValues(), !1;
}, KontaktEditor.prototype.validateValues = function() {
    this.validationSucceeded(), this.validationFailedWithError("");
}, KontaktEditor.prototype.validationSucceeded = function() {
    this.copyValuesFromModal(), this.removeModalHooks(), this.closeModalWindow();
}, KontaktEditor.prototype.validationFailedWithError = function(a) {
    var b = this.modalContainer.find(".mod-Alert");
    b.find("p").html(a);
    var c = (a.match(/<br>/g) || []).length, d = this.errorHeight[Math.min(Math.max(1, c), this.errorHeight.length) - 1];
    if (!b.is(":visible") || this.currentErrorHeight != d) {
        var e = d - this.currentErrorHeight;
        this.currentErrorHeight = d, this.modalContainer.animate({
            top: parseFloat(this.modalContainer.css("top")) - e / 2,
            height: this.modalContainer.outerHeight() + e
        }, 200), b.slideDown(200);
    }
    this.modalContainer.children().fadeTo(200, 1);
}, KontaktEditor.prototype.copyValuesFromModal = function() {}, KontaktEditor.prototype.onDeleteButtonClicked = function() {
    this.clearFields();
}, KontaktEditor.prototype.clearFields = function() {}, KontaktEditor.prototype.onCancelButtonClicked = function() {
    return this.removeModalHooks(), this.closeModalWindow(), !1;
}, KontaktEditor.prototype.removeModalHooks = function() {
    this.modalContainer.off("click.savebutton").off("deleteButton").off("click.cancelbutton");
};

var EmailKontaktEditor = function(a, b, c, d, e) {
    KontaktEditor.call(this, a, b, c, d, e);
};

EmailKontaktEditor.prototype = new KontaktEditor(), EmailKontaktEditor.prototype.constructor = EmailKontaktEditor, 
EmailKontaktEditor.prototype.copyValuesToModal = function() {
    jQuery(".sal-kontaktdaten-email label").text(jQuery("#" + this.idPrefix + "_label").text()), 
    jQuery("#sal-kontaktdaten-email_field").val(jQuery("#" + this.idPrefix + "_email").val());
}, EmailKontaktEditor.prototype.showModalWindow = function() {
    var a = '<a class="modalCloseImg" title="' + this.localizedClose + '"></a>';
    jQuery(".sal-kontaktdaten-email").modal({
        containerCss: {
            width: 640,
            height: 250,
            padding: 16
        },
        close: !0,
        autoResize: !0,
        zIndex: 50050,
        onShow: this.onModalWindowShown.bind(this),
        closeHTML: a
    });
}, EmailKontaktEditor.prototype.copyValuesFromModal = function() {
    var a = jQuery("#sal-kontaktdaten-email_field").val();
    "" == a ? (jQuery("#" + this.idPrefix + "_email").val(""), jQuery("#" + this.idPrefix + "_email_value").text(this.noValueString)) : (jQuery("#" + this.idPrefix + "_email").val(a), 
    jQuery("#" + this.idPrefix + "_email_value").text(a));
}, EmailKontaktEditor.prototype.clearFields = function() {
    jQuery("#sal-kontaktdaten-email_field").val("").focus();
}, EmailKontaktEditor.prototype.validateValues = function() {
    var a = this;
    this.rpc.call.validateEmail(function(b) {
        null != b && "" != b ? a.validationFailedWithError(b) : a.validationSucceeded();
    }, jQuery("#sal-kontaktdaten-email_field").val(), this.isRequiredMsg);
};

var PhoneKontaktEditor = function(a, b, c, d, e) {
    KontaktEditor.call(this, a, b, c, d, e);
};

PhoneKontaktEditor.prototype = new KontaktEditor(), PhoneKontaktEditor.prototype.constructor = PhoneKontaktEditor, 
PhoneKontaktEditor.prototype.copyValuesToModal = function() {
    jQuery('.sal-kontaktdaten-phone label[for="sal-kontaktdaten-prefix_field"]').text(jQuery("#" + this.idPrefix + "_label").text()), 
    jQuery("#sal-kontaktdaten-prefix_field").val(jQuery("#" + this.idPrefix + "_prefix").val()), 
    jQuery("#sal-kontaktdaten-number_field").val(jQuery("#" + this.idPrefix + "_number").val()), 
    jQuery("#sal-kontaktdaten-from_field").val(jQuery("#" + this.idPrefix + "_from").val()), 
    jQuery("#sal-kontaktdaten-until_field").val(jQuery("#" + this.idPrefix + "_until").val());
}, PhoneKontaktEditor.prototype.showModalWindow = function() {
    var a = '<a class="modalCloseImg" title="' + this.localizedClose + '"></a>';
    jQuery(".sal-kontaktdaten-phone").modal({
        containerCss: {
            width: 640,
            height: 290,
            padding: 16
        },
        close: !0,
        autoResize: !0,
        zIndex: 50050,
        onShow: this.onModalWindowShown.bind(this),
        closeHTML: a
    });
}, PhoneKontaktEditor.prototype.copyValuesFromModal = function() {
    var a = jQuery("#sal-kontaktdaten-prefix_field").val();
    "" == a ? jQuery("#" + this.idPrefix + "_prefix_value").text(this.noValueString) : jQuery("#" + this.idPrefix + "_prefix_value").text(a), 
    jQuery("#" + this.idPrefix + "_prefix").val(a);
    var b = jQuery("#sal-kontaktdaten-number_field").val();
    jQuery("#" + this.idPrefix + "_number").val(b), jQuery("#" + this.idPrefix + "_number_value").text(b);
    var c = jQuery("#sal-kontaktdaten-from_field").val();
    "" == c && (c = "00:00");
    var d = jQuery("#sal-kontaktdaten-until_field").val();
    "" == d && (d = "00:00"), "00:00" == c && "00:00" == d ? jQuery("#" + this.idPrefix + "_avail").hide() : jQuery("#" + this.idPrefix + "_avail").show(), 
    jQuery("#" + this.idPrefix + "_from").val(c), jQuery("#" + this.idPrefix + "_from_value").text(c), 
    jQuery("#" + this.idPrefix + "_until").val(d), jQuery("#" + this.idPrefix + "_until_value").text(d);
}, PhoneKontaktEditor.prototype.clearFields = function() {
    jQuery("#sal-kontaktdaten-prefix_field").val("").focus(), jQuery("#sal-kontaktdaten-number_field").val(""), 
    jQuery("#sal-kontaktdaten-from_field").val(""), jQuery("#sal-kontaktdaten-until_field").val("");
}, PhoneKontaktEditor.prototype.validateValues = function() {
    var a = this;
    this.rpc.call.validatePhone(function(b) {
        null != b && "" != b ? a.validationFailedWithError(b) : a.validationSucceeded();
    }, jQuery("#sal-kontaktdaten-prefix_field").val(), jQuery("#sal-kontaktdaten-number_field").val(), jQuery("#sal-kontaktdaten-from_field").val(), jQuery("#sal-kontaktdaten-until_field").val(), this.isRequiredMsg);
};

var LPModernMediaUpload = function(a) {
    this.wrapperId = a.wrapperId, this.uploadUrl = a.uploadUrl, this.sessionId = a.sessionId, 
    this.uploadId = a.uploadId, this.updateErrorList = a.updateErrorList, this.updateFileList = a.updateFileList, 
    this.cleanUploadErrors = a.cleanUploadErrors, this.disableFormButtonWhileUpload = a.disableFormButtonWhileUpload, 
    this.localizedClose = a.localizedClose, this.wrapperId && this.uploadUrl && this.sessionId && this.uploadId && this.updateFileList || console.log("Error, the options wrapperId, uploadUrl, sessionId, uploadId, updateFileList are required", this.wrapperId, this.uploadUrl, this.sessionId, this.uploadId, this.updateFileList), 
    this.localizedClose && "undefined" != typeof this.localizedClose || (this.localizedClose = "Schließen"), 
    this.maxAmount = a.maxAmount || 1, this.maxSize = a.maxSize || -1, this.allowedMimeTypes = a.allowedMimeTypes || [], 
    this.useModernUpload = function() {
        var a = document.createElement("div");
        return "draggable" in a || "ondragstart" in a && "ondrop" in a;
    }() && !!(window.File && window.FileList && window.FileReader) && "FormData" in window && !(navigator.userAgent.match("iPhone OS") || navigator.userAgent.match("iPad") || navigator.userAgent.match("Android")), 
    this.findAllElements(), this.useModernUpload ? (this.droparea.addClass("modernmediaupload--modern"), 
    this.initDragnDrop()) : (this.droparea.addClass("modernmediaupload--fallback"), 
    this.initFallbackElements()), this.initFileSelect(), this.updateDropareaContent(!1, 0);
};

LPModernMediaUpload.debug = !1, LPModernMediaUpload.prototype.findAllElements = function() {
    LPModernMediaUpload.debug && console.log("findAllElements"), this.droparea = jQuery("#" + this.wrapperId + " .droparea"), 
    this.modernmediauploaddiv = this.droparea.is(".modernmediaupload") ? this.droparea : this.droparea.parents(".modernmediaupload"), 
    this.dropareaInactive = this.droparea.find(".droparea__wrapper--inactive"), this.dropareaActive = this.droparea.find(".droparea__wrapper--active"), 
    this.dropareaFull = this.droparea.find(".droparea__wrapper--full"), this.fileUpload = jQuery("#" + this.wrapperId + "_file_upload"), 
    this.uploadBar = this.droparea.find(".droparea__filler"), this.uploadedFiles = 0;
}, LPModernMediaUpload.prototype.initDragnDrop = function() {
    LPModernMediaUpload.debug && console.log("yoinitDragnDrop");
    var a = this;
    a.droparea.on("dragstart", function(b) {
        b.originalEvent.dataTransfer.setData("text/plain", "anything"), a.droparea.addClass(".droparea--dragging");
    }).on("dragenter", function(b) {
        a.droparea.addClass("droparea--hover");
    }).on("dragleave", function(b) {
        a.droparea.removeClass("droparea--hover");
    }).on("dragover", function(a) {
        a.preventDefault();
    }).on("drop", function(b) {
        a.droparea.removeClass("droparea--hover"), a.droparea.removeClass("droparea--dragging"), 
        b.preventDefault();
        var c = b.originalEvent.dataTransfer.files;
        a.uploadFilesAjax(c);
    });
    var b = !1;
    jQuery(document).on("dragover", function(c) {
        c.preventDefault(), a.droparea.addClass("droparea--dragging"), b !== !1 && clearTimeout(b), 
        b = setTimeout(function() {
            a.droparea.removeClass("droparea--dragging");
        }, 100);
    }).on("drop", function(a) {
        a.preventDefault();
    });
}, LPModernMediaUpload.prototype.initFallbackElements = function() {
    LPModernMediaUpload.debug && console.log("initFallbackElements"), this.droparea.find(".droparea__progress").hide(), 
    this.fallbackContainer = jQuery('<div class="sal-modernmedia-fallback">').appendTo("body"), 
    this.fallbackIFrame = jQuery('<iframe border="0" height="100" width="100" name="' + this.wrapperId + '_fallback_iframe"></iframe>').appendTo(this.fallbackContainer), 
    this.fallbackForm = jQuery('<form action="' + this.uploadUrl + '" method="POST" encType="multipart/form-data" target="' + this.wrapperId + '_fallback_iframe">').appendTo(this.fallbackContainer), 
    this.fallbackForm.append('<input type="hidden" name="sessionId" value="' + this.sessionId + '">'), 
    this.fallbackForm.append('<input type="hidden" name="id" value="' + this.uploadId + '">'), 
    this.fallbackForm.append(this.fileUpload), this.fileUpload.attr("name", "file"), 
    this.fileUpload.removeAttr("multiple"), this.fallbackForm.append('<input type="submit">');
}, LPModernMediaUpload.prototype.initFileSelect = function() {
    LPModernMediaUpload.debug && console.log("initFileSelect");
    var a = this;
    a.fileUpload.on("change", function(b) {
        if (a.useModernUpload) a.uploadFilesAjax(b.target.files); else {
            var c = b.target.value, d = c.substr(c.lastIndexOf("\\") + 1);
            a.uploadFilesIframe(d);
        }
    });
}, LPModernMediaUpload.prototype.uploadFileAjax = function(a, b) {
    var c = this;
    LPModernMediaUpload.debug && console.log("uploadFile", a);
    var d = (a.name, a.size), e = a.type;
    LPModernMediaUpload.debug && console.log("type", e, c.allowedMimeTypes, jQuery.inArray(e, c.allowedMimeTypes), d, c.maxSize, d > c.maxSize);
    var f = null;
    "" === e || -1 === jQuery.inArray(e, c.allowedMimeTypes) ? f = "mime" : c.maxSize > 0 && d > c.maxSize && (f = "size"), 
    c.droparea.find(".droparea__filename").text(a.name), c.updateDropareaContent(!0), 
    c.disableFormButtonWhileUpload && (LPModernMediaUpload.debug && console.log("Trying to set form continue-button inactive..."), 
    "undefined" != typeof window.CobaLDFragebogenSeite && (window.CobaLDFragebogenSeite.deactivateAction("FORM", "CONTINUE", !0), 
    LPModernMediaUpload.debug && console.log("Form button inactive!")));
    var g = new FormData();
    g.append("sessionId", this.sessionId), g.append("id", this.uploadId), null === f ? g.append("upload", a, a.name) : (g.append("fileName", a.name), 
    g.append("errorMessage", f)), jQuery.ajax({
        type: "POST",
        url: this.uploadUrl,
        enctype: "multipart/form-data",
        data: g,
        processData: !1,
        contentType: !1,
        cache: !1,
        xhr: function() {
            var a = new window.XMLHttpRequest();
            return LPModernMediaUpload.debug && console.log("inject upload progress to xhr", a), 
            c.uploadBar.css("width", "0%"), a.upload.addEventListener("progress", function(a) {
                if (a.lengthComputable) {
                    var b = a.loaded / a.total;
                    c.updateDropareaContent(!0), c.uploadBar.css("width", 100 * b + "%"), LPModernMediaUpload.debug && console.log("progress", b);
                }
            }, !1), a;
        }
    }).fail(function(a, d, e) {
        LPModernMediaUpload.debug && console.log("upload failed", d, e), c.disableFormButtonWhileUpload && (LPModernMediaUpload.debug && console.log("Trying to set form continue-button active..."), 
        "undefined" != typeof window.CobaLDFragebogenSeite && (window.CobaLDFragebogenSeite.deactivateAction("FORM", "CONTINUE", !1), 
        LPModernMediaUpload.debug && console.log("Form button active!"))), c.updateFileList(), 
        b();
    }).done(function(a, d, e) {
        LPModernMediaUpload.debug && console.log("upload done", a, d), c.disableFormButtonWhileUpload && (LPModernMediaUpload.debug && console.log("Trying to set form continue-button active..."), 
        "undefined" != typeof window.CobaLDFragebogenSeite && (window.CobaLDFragebogenSeite.deactivateAction("FORM", "CONTINUE", !1), 
        LPModernMediaUpload.debug && console.log("Form button active!"))), c.uploadedFiles++, 
        c.updateFileList(), b();
    });
}, LPModernMediaUpload.prototype.uploadFilesAjax = function(a) {
    var b = this, c = 0;
    LPModernMediaUpload.debug && console.log(a), "function" == typeof b.cleanUploadErrors && (LPModernMediaUpload.debug && console.log("cleaning upload errors"), 
    b.cleanUploadErrors());
    var d = function() {
        LPModernMediaUpload.debug && console.log("invoking next with i", c, "of", a.length, "uploaded:", b.uploadedFiles, "max:", b.maxAmount, "done uploading", c >= a.length, "reached max", b.uploadedFiles >= b.maxAmount, c >= a.length || b.uploadedFiles >= b.maxAmount), 
        c >= a.length || b.uploadedFiles >= b.maxAmount ? LPModernMediaUpload.debug && console.log("done uploading", c, "of", a.length, "files") : (LPModernMediaUpload.debug && console.log("uploading file", c, "of", a.length), 
        b.uploadFileAjax(a[c++], d));
    };
    d();
}, LPModernMediaUpload.prototype.uploadFilesIframe = function(a) {
    var b = this;
    "function" == typeof b.cleanUploadErrors && (LPModernMediaUpload.debug && console.log("cleaning upload errors"), 
    b.cleanUploadErrors()), b.updateDropareaContent(!0), b.droparea.find(".droparea__filename").text(a), 
    b.fallbackIFrame.on("load", function() {
        b.fileUpload.replaceWith(b.fileUpload.clone(!0)), b.uploadedFiles++, b.updateFileList(), 
        b.fallbackIFrame.off("load");
    }), b.fallbackForm.submit();
}, LPModernMediaUpload.prototype.onUpdateFileList = function(a, b) {
    var c = this;
    c.uploadedFiles = a, c.updateDropareaContent(!1, a), c.updateErrorList && c.updateErrorList();
    var d = jQuery("#" + c.wrapperId + " .filelist"), e = jQuery("#" + c.wrapperId + " .sal-modernmediamodal");
    LPModernMediaUpload.debug && console.log(e), d.find(".filelist__delete").off("click.momeupmodal").on("click.momeupmodal", function(a) {
        var b = jQuery(this);
        e.find(".sal-cancel").off("click.momeupmodalcancel").on("click.momeupmodalcancel", function() {
            LPModernMediaUpload.debug && console.log("cancel"), jQuery.modal.close();
        }), e.find(".sal-delete").off("click.momeupmodaldelete").on("click.momeupmodaldelete", function() {
            var a = b.attr("data-deletefunction");
            LPModernMediaUpload.debug && console.log("delete", a), "function" == typeof window[a] ? (window[a](), 
            "function" == typeof c.cleanUploadErrors && (LPModernMediaUpload.debug && console.log("cleaning upload errors"), 
            c.cleanUploadErrors())) : LPModernMediaUpload.debug && console.log("There is no function called", a), 
            jQuery.modal.close();
        });
        var d = '<a class="modalCloseImg" title="' + c.localizedClose + '"></a>';
        return e.modal({
            containerCss: {
                width: 380,
                height: 140,
                padding: 16
            },
            close: !0,
            resizable: !1,
            zIndex: 50050,
            closeHTML: d
        }), a.preventDefault(), !1;
    });
}, LPModernMediaUpload.prototype.updateDropareaContent = function(a, b) {
    LPModernMediaUpload.debug && console.log("updateDropareaContent", a, b), a ? (this.dropareaActive.show(), 
    this.dropareaInactive.hide(), this.dropareaFull.hide()) : b >= this.maxAmount ? (this.dropareaActive.hide(), 
    this.dropareaInactive.hide(), this.dropareaFull.show()) : (this.dropareaActive.hide(), 
    this.dropareaInactive.show(), this.dropareaFull.hide());
}, LPModernMediaUpload.prototype.isValidFileName = function(a) {
    filePath.substr(filePath.lastIndexOf(".") + 1);
};
//# sourceMappingURL=Elements.min.map